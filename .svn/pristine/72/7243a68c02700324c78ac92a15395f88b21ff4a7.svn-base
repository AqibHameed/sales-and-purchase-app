class BidsController < ApplicationController

  before_filter :authenticate_customer!

  def create
    @stone = Stone.find(params[:stone_id])
    @bid = Bid.find_or_initialize_by_stone_id_and_customer_id(params[:stone_id], current_customer.id)
    @tender = @stone.tender
    @bid.total = params[:bid][:total]
    @bid.price_per_carat = params[:bid][:price_per_carat]
    if @bid.save
      respond_to do |format|
        format.js { render 'tenders/refresh_data.js.erb'}
        format.html {redirect_to @bid.stone.tender}
      end
    else
      puts @bid.errors.inspect
      respond_to do |format|
        format.js {render :text => 'Error'}
        format.html {redirect_to @bid.stone.tender}
      end
    end

  end

  def update
    @bid = Bid.find(params[:id])
    @stone = @bid.stone
    @tender = @bid.stone.tender
    if @bid.update_attributes(params[:bid])
      respond_to do |format|
        format.js { render 'tenders/refresh_data.js.erb'}
        format.html {redirect_to @bid.stone.tender}
      end
    else
      puts @bid.errors.inspect
      respond_to do |format|
        format.js {render :text => 'Error'}
        format.html {redirect_to @bid.stone.tender}
      end
    end
  end

  def place_new
    @stone = Stone.find(params[:stone_id])
    tender = @stone.tender
    past_tenders = Tender.find(:all, :conditions => ["id != ? and company_id = ? and created_at < ?",tender.id, tender.company_id, tender.created_at], :limit => 5)
    past_tender = past_tenders.last 
    @history = TenderWinner.find(:all, :conditions => ["tender_id in (?) and description = ?",past_tenders.collect(&:id),@stone.description], :order => "tender_id")
    
    stones = Stone.find(:all, :conditions => ["description = ? and tender_id in (?)",@stone.description,past_tenders.collect(&:id)])
    bid_history = Bid.find(:all, :conditions => ["tender_id in (?) and customer_id = ? and stone_id in (?)",past_tenders.collect(&:id),current_customer.id,stones.collect(&:id)], :order => "tender_id")
    my_list = {}
    bid_history.each do |b|
      my_list[b.tender_id] = b.price_per_carat
    end
    @my_bid_list = []
    @history.each do |h|
      @my_bid_list << (my_list[h.tender_id].nil? ? 0 : my_list[h.tender_id])  
    end
    
    
    
    @past_winner = @history.last
    
     
    logger.info "---------------------------------"
    logger.info @my_bid_list
    logger.info "---------------------------------"
     
    @bid = Bid.find_or_initialize_by_stone_id_and_customer_id(params[:stone_id], current_customer.id)
    render :partial => 'place_new'
  end

end

