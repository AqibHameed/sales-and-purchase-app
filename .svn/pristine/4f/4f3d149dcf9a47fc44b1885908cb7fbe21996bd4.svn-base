class Tender < ActiveRecord::Base

  attr_accessible :name, :description, :open_date, :close_date, :tender_open, :customer_ids, :document, :no_of_stones,
                  :weight, :carat, :tender_type, :size, :purity, :polished, :color, :stones_attributes, :send_confirmation, :delete_stones

  attr_accessor :delete_stones

  has_many :customers_tenders
  has_many :customers, :through => :customers_tenders
  has_many :bids
  has_many :stones
  has_many :winners

  accepts_nested_attributes_for :stones

  validates_presence_of :name, :open_date, :close_date

  has_attached_file :document

  after_save :create_stones_from_uploaded_file

  scope :open_tenders, lambda{|date| where("close_date >= ?", date.beginning_of_day) }

  scope :closed_tenders, lambda{|date| where("close_date < ?", date.end_of_day) }

  scope :active_open_for_dates, lambda{|start_date, end_date|
    where("(open_date >= ? AND open_date <= ?)", start_date.beginning_of_day, end_date.end_of_day)
  }

  scope :active_close_for_dates, lambda{|start_date, end_date|
    where("(close_date <= ? AND close_date >= ?)", end_date.end_of_day, start_date.beginning_of_day)
  }

  scope :opening_today, where("open_date <= ? AND open_date >= ?", DateTime.now.in_time_zone.end_of_day, DateTime.now.in_time_zone.beginning_of_day)

  scope :closing_today, where("close_date <= ? AND close_date >= ?", DateTime.now.in_time_zone.end_of_day, DateTime.now.in_time_zone.beginning_of_day)

#  validates_attachment_content_type :document, :content_type => ["application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/excel"], :message => 'Only *.xls files allowed'

  def self.tenders_with_bid
    where(:id => Bid.all.map(&:tender_id).uniq)
  end

  def winning_bid
    Bid.where(:id => self.stones.map(&:id)).order('total DESC').first
  end

  def winning_customer
    winning_bid.blank? ? '' : winning_bid.customer.name
  end

  def send_confirmation?
    self.send_confirmation ? 'Yes' : 'No'
  end

  def bid_count
    Bid.where(:stone_id => self.stone_ids).count
  end

  def total_bid_amount
    self.bids.map(&:total).sum rescue 0
  end

  def create_stones_from_uploaded_file
    if self.document_updated_at_changed?
      data_file = Spreadsheet.open(self.document.path)
      worksheet = data_file.worksheet(0)
      worksheet.each_with_index do |data_row, i|
        unless i == 0
          stone = self.stones.build(:deec_no => data_row[0],
                       :lot_no => data_row[1].to_i,
                       :description => data_row[2],
                       :no_of_stones => data_row[3],
                       :weight => data_row[4]
                       )
           stone.save
           puts stone.errors.inspect
        end
      end

    end
  end

  #Determines if tender is open or not
  def open?
    self.close_date > DateTime.now
  end

  def customer_bid_amount(customer)
    self.bids.find_by_customer_id(customer.id).total
  end

  def self.tenders_for_calender(start_date, end_date)
    @open_data = Tender.active_open_for_dates(start_date, end_date)
    @close_data = Tender.active_close_for_dates(start_date, end_date)

    @hash = []

    @open_data.each do |d|
      op = {}
      op['id'] = d.id
      op['title'] = d.name
      op['color'] = 'green'
      op['url'] = ''
      op['allDay'] = false
      op['start'] =  '26/7/2013'.to_date#d.open_date.in_time_zone('Mumbai')
#      op['end'] = d.open_date.advance(:minutes => 30)
      @hash << op
    end

    @close_data.each do |d|
      op = {}
      op['id'] = d.id
      op['title'] = d.name
      op['color'] = 'red'
      op['url'] = ''
      op['allDay'] = false
#      op['start'] = d.close_date
#      op['end'] = d.close_date.advance(:minutes => 30)
      @hash << op
    end

    @hash
  end

  def self.search_results(filters, current_customer, history_page = false)
    query = []
    unless filters.blank?
      query << "name like '%#{filters[:name]}%'" unless filters[:name].blank?
      query << "open_date >= '#{filters[:start_date].to_datetime.beginning_of_day}'" unless filters[:start_date].blank?
      query << "close_date <= '#{filters[:end_date].to_datetime.end_of_day}'" unless filters[:end_date].blank?
      query << "(open_date <= '#{filters[:specific_date].to_datetime.end_of_day}' AND open_date >= '#{filters[:specific_date].to_datetime.beginning_of_day}') OR (close_date <= '#{filters[:specific_date].to_datetime.end_of_day}' AND close_date >= '#{filters[:specific_date].to_datetime.beginning_of_day}')" unless filters[:specific_date].blank?
      query << "stones.stone_type like '%#{filters[:type]}%'" unless filters[:type].blank?
      query << "description like '%#{filters[:description]}%'" unless filters[:description].blank?
      query << "stones.size = '#{filters[:size]}'" unless filters[:size].blank?
      query << "stones.carat = '#{filters[:carat]}'" unless filters[:carat].blank?
      query << "stones.color = '#{filters[:color]}'" unless filters[:color].blank?
      query << "stones.purity = '#{filters[:purity]}'" unless filters[:purity].blank?
    end
    query = query.join(' AND ')
    if history_page
      if current_customer
        Tender.joins(:stones => {:bids => :customer}).where("customer_id = #{current_customer.id}").where(query)
      else
        Tender.joins(:stones => {:bids => :customer}).where(query)
      end
    else
      if current_customer.blank?
        Tender.joins(:stones).where(query)
      else
        current_customer.tenders.joins(:stones).where(query)
      end
    end
  end

  def self.send_open_notification
    @tenders = Tender.opening_today
    @tenders.each do |tender|
      unless tender.created_at.beginning_of_day <= tender.open_date && tender.open_date <= tender.created_at.end_of_day
        tender.customers.each do |customer|
          TenderMailer.send_tender_open_notification(tender, customer).deliver
        end
      end
    end
  end

  def self.send_close_notification
    @tenders = Tender.closing_today
    @tenders.each do |tender|
      Admin.all.each do |admin|
        TenderMailer.send_tender_close_notification(tender, admin).deliver
      end
    end
    save_winners
  end

  def self.save_winners
    @tenders = Tender.closing_today
    @tenders.each do |tender|
      tender.stones.each do |stone|
        unless stone.bids.blank?
          winning_bid = stone.top_bid.first
          winner = Winner.find_or_initialize_by_tender_id_and_stone_id(tender.id, stone.id)
          winner.bid_id = winning_bid.id
          winner.customer_id = winning_bid.customer.id
          winner.save
        end
      end
    end
  end

  rails_admin do
    list do
      [:name, :open_date, :close_date].each do |field_name|
        field field_name
      end
      field :tender_open, :toggle
    end
    edit do
      field :name
#      field :description, :text do
#        bootstrap_wysihtml5 true
#      end
      field :open_date do
        default_value Date.today
      end
      field :close_date
      field :stones
      field :delete_stones do
        partial :delete_stones
      end
      field :tender_open do
        default_value true
      end
      field :document do
        partial :upload_document
      end
      field :customers
    end

  end

end

