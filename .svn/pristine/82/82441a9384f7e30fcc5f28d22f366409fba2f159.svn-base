class Tender < ActiveRecord::Base

  attr_accessible :name, :description, :open_date, :close_date, :tender_open, :customer_ids, :document, :no_of_stones,
                  :weight, :carat, :tender_type, :size, :purity, :polished, :color

  has_and_belongs_to_many :customers
  has_many :bids

  validates_presence_of :name, :description, :open_date, :close_date

  has_attached_file :document

  scope :open_tenders, lambda{|date| where("close_date >= ?", date.beginning_of_day) }

  scope :closed_tenders, lambda{|date| where("close_date < ?", date.end_of_day) }

  scope :active_open_for_dates, lambda{|start_date, end_date|
    where("(open_date >= ? AND open_date <= ?)", start_date.beginning_of_day, end_date.end_of_day)
  }

  scope :active_close_for_dates, lambda{|start_date, end_date|
    where("(close_date <= ? AND close_date >= ?)", end_date.end_of_day, start_date.beginning_of_day)
  }

  validates_attachment_content_type :document, :content_type => "application/pdf", :message => 'Only *.pdf files allowed'

  def send_confirmation?
    self.send_confirmation ? 'Yes' : 'No'
  end

  def total_bid_amount
    self.bids.map(&:amount).sum rescue 0
  end

  #Determines if tender is open or not
  def open?
    self.close_date > DateTime.now
    false
  end

  def customer_bid_amount(customer)
    self.bids.find_by_customer_id(customer.id).amount
  end

  def self.tenders_for_calender(start_date, end_date)
    @open_data = Tender.active_open_for_dates(start_date, end_date)
    @close_data = Tender.active_close_for_dates(start_date, end_date)

    @hash = []

    @open_data.each do |d|
      op = {}
      op['id'] = d.id
      op['title'] = d.name
      op['color'] = 'green'
      op['url'] = ''
      op['allDay'] = false
      op['start'] = d.open_date.in_time_zone('Mumbai')
      op['end'] = d.open_date.advance(:minutes => 30)
      @hash << op
    end

    @close_data.each do |d|
      op = {}
      op['id'] = d.id
      op['title'] = d.name
      op['color'] = 'red'
      op['url'] = ''
      op['allDay'] = false
      op['start'] = d.close_date
      op['end'] = d.close_date.advance(:minutes => 30)
      @hash << op
    end

    @hash
  end

  def self.search_results(filters, current_customer)
    query = []
    query << "name like '%#{filters[:name]}%'" unless filters[:name].blank?
    query << "open_date >= '#{filters[:start_date].to_datetime.beginning_of_day}'" unless filters[:start_date].blank?
    query << "close_date <= '#{filters[:end_date].to_datetime.end_of_day}'" unless filters[:end_date].blank?
    query << "(open_date <= '#{filters[:specific_date].to_datetime.end_of_day}' AND open_date >= '#{filters[:specific_date].to_datetime.beginning_of_day}') OR (close_date <= '#{filters[:specific_date].to_datetime.end_of_day}' AND close_date >= '#{filters[:specific_date].to_datetime.beginning_of_day}')" unless filters[:specific_date].blank?
    query << "tender_type like '%#{filters[:type]}%'" unless filters[:type].blank?
    query << "description like '%#{filters[:description]}%'" unless filters[:description].blank?
    query << "size = '#{filters[:size]}'" unless filters[:size].blank?
    query << "carat = '#{filters[:carat]}'" unless filters[:carat].blank?
    query << "color = '#{filters[:color]}'" unless filters[:color].blank?
    query << "purity = '#{filters[:purity]}'" unless filters[:purity].blank?
    query = query.join(' AND ')
    current_customer.tenders.where(query)
  end

  rails_admin do
    list do
      [:name, :description, :open_date, :close_date].each do |field_name|
        field field_name
      end
      field :tender_open, :toggle
    end
    edit do
      field :name
      field :description, :text do
        bootstrap_wysihtml5 true
      end
      field :open_date do
        default_value Date.today
      end
      field :close_date
      field :tender_open do
        default_value true
      end
      field :tender_type, :enum do
        enum do
          ['Parcel', 'Stone']
        end
      end
      field :no_of_stones
      field :weight
      field :carat
      field :size
      field :color
      field :purity
      field :polished
      field :document
      field :customers
    end

  end

end

